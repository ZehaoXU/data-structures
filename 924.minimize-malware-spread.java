import java.util.Arrays;

/*
 * @lc app=leetcode id=924 lang=java
 *
 * [924] Minimize Malware Spread
 *
 * https://leetcode.com/problems/minimize-malware-spread/description/
 *
 * algorithms
 * Hard (40.40%)
 * Likes:    170
 * Dislikes: 135
 * Total Accepted:    14.3K
 * Total Submissions: 35.2K
 * Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
 *
 * In a network of nodes, each node i is directly connected to another node j
 * if and only if graph[i][j] = 1.
 * 
 * Some nodes initial are initially infected by malware.  Whenever two nodes
 * are directly connected and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware.  This spread of malware
 * will continue until no more nodes can be infected in this manner.
 * 
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network, after the spread of malware stops.
 * 
 * We will remove one node from the initial list.  Return the node that if
 * removed, would minimize M(initial).  If multiple nodes could be removed to
 * minimize M(initial), return such a node with the smallest index.
 * 
 * Note that if a node was removed from the initial list of infected nodes, it
 * may still be infected later as a result of the malware spread.
 * 
 * 
 * 
 * 
 * 
 * 
 * Example 1:
 * 
 * 
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * 
 * 
 * Example 2:
 * 
 * 
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 * 
 * 
 * Example 3:
 * 
 * 
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 * 
 * 
 * 
 * 
 * Note:
 * 
 * 
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] = 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 * 
 * 
 */
class Solution {
    /**
     * 连通性问题，UnionFind。遍历之后需要数一下initial里对应root的数量，如果同一连通分量有两个及以上感染源，则去掉是无用的，只有仅有一个感染源去掉才有用，再用weights记录连通分量的大小，找连通分量最大的即可
     * 题意有点难看懂。首选返回去掉后，M减少最多的答案；其次返回减少相同条件下（包括不减少）index/数字本身最小的，并不是initial里index最小，并没说清楚
     * 时间复杂度 O(N^2); 空间复杂度 O(N)
     * Runtime: 7 ms, faster than 88.90% of Java online submissions for Minimize Malware Spread.
     * Memory Usage: 68.4 MB, less than 100.00% of Java online submissions for Minimize Malware Spread.
     * @param graph
     * @param initial
     * @return
     */
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n-1; i++) {
            for (int j = i+1; j < n; j++) {
                if (graph[i][j] == 1)
                    uf.union(i, j);
            }
        }
        int[] count = new int[n];
        for (int i : initial)
            count[uf.find(i)]++;
        
        Arrays.sort(initial);
        int res = -1, size = -1;
        for (int i : initial) {
            int root = uf.find(i);
            // useful
            if (count[root] == 1) {
                if (uf.weights[root] > size) {
                    res = i;
                    size = uf.weights[root];
                }
            }
        }
        if (res != -1)  return res;
        return initial[0];
    }
    class UnionFind {
        int[] parents;
        int[] weights;
        public UnionFind(int n) {
            parents = new int[n];
            weights = new int[n];
            for (int i = 0; i < n; i++) {
                parents[i] = i;
                weights[i] = 1;
            }
        }
        public int find(int i) {
            if (parents[i] != i) {
                parents[i] = find(parents[i]);
            }
            return parents[i]; 
        }
        public void union(int i, int j) {
            int ri = find(i);
            int rj = find(j);
            if (ri != rj) {
                parents[ri] = rj;
                weights[rj] += weights[ri];
            }
        }
    }
}

